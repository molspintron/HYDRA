.. HYDRA Documentation documentation master file, created by
   sphinx-quickstart on Wed Mar  3 14:05:39 2021.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to HYDRA's documentation!
===============================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:

HYDRA is a tool to compute hybridization functions using atom-centered basis sets.
It can perform local decompositions of hybridization functions.

The tool was developed by Dr. Marc Philipp Bahlke (in Fortran)
and re-written in C++ by Michaela Schneeberger, for an
improved performance.


User Guide
==========

Installation
------------
HYDRA is available via it's `GitHub repository`_ under the MIT license.
Compiling can be done with cmake or via a custom Makefile.
HYDRA uses the Eigen library which can be downloaded from the ´here´_.
Unzip the Eigen files and and save them somewhere on your system.

.. _GitHub Repository: https://github.com/molspintron/HYDRA
.. _here: https://eigen.tuxfamily.org/index.php?title=Main_Page

cmake
~~~~~
In the HYDRA directory create a directory build and navigate in there::

    $ mkdir build
    $ cd build

Generate a Makefile using cmake::

    $ cmake -G "Unix Makefiles" ../source

Now HYDRA can be compiled using the Makefile generated by cmake::

    $ make all

The HYDRA executable is located in the build directory and can be used now.

custom Makefile
~~~~~~~~~~~~~~~

Alternatively to cmake you can use a custom Makefile.
An example Makefile is given in the ./source directory. Makefile_omp together with main_omp.cpp can be used to
compile HYDRA without support for MPI. To do so create a build folder and copy the relevant files there::

    $ mkdir build
    $ cp source/Makefile_omp build/Makefile
    $ cp source/main_omp.cpp build/main.cpp
    $ cp source/InputOutput.hpp source/InputOutput.cpp build/
    $ cd build

Open Makefile and set the path to the Eigen files on your system. You can adjust the Makefile further e.g. by deleting
the -fopenmp HYDRA will be compiled without support for OMP and run without any parallelization.
After adjusting the Makefile compile in the build directory via::

    $ make



Using HYDRA
-----------

To run HYDRA you need to generate the following files in your working directory:

* delta.global.in (Contains the user configuration for HYDRA, see )
* overlap (Contains the overlap matrix)
* hamiltonian (Contains the hamiltonian matrix)
* eigenvalues (Contains the eigenvalues)
* coef (Contains the coeficents)
* optional: basis_array (Contains indices of basis functions to be included in a subspace, only needed for decomposition of hybridization function)

To generate the required matrices from Turbomole output a script is given in ./tools/turbomole.
In some cases its necessary to rename the generated files. (E.g. eigenvalues.dat -> egenvalues)
If you use other QC codes like Gaussian you need to generate the matrices mentioned above in the
exact same format (see ./examples)

delta.gobal.in
~~~~~~~~~~~~~~

The delta.global.in file contains the configuration for HYDRA runs.
It is structured like this::

    <Integer>   ! nbas, total number of basis functions
    <Integer>   ! xbf1, index of 1st basis function of impurity
    <Integer>   ! xbf1, index of 1st basis function of impurity
    <Integer>   ! 1= real, 2= matsu; type of energy axis, matsu is Matsubara axis
    <Integer>   ! beta, inverse temperature, only relevant for Matsubara axis
    <Integer>   ! points, number of data points for the hybridization function
    <Integer>   ! step size between energy points
    <Double>    ! smear,  smearing or value of the imaginary off-set
    <Double>    ! Fermi energy, if set to 0 the hybridization function will not be shifted
    <Integer>   ! unit (0 = hartree, 1 = eV)
    <Integer>   ! diagonalize (true if 1), note that this is not always required, check if impurity block is already diagonal!
    <Integer>   ! method, 0 = bath, 1 = use Lehmann, 2 = projector (not fully implemented yet)
    <Integer>   ! 1 = calculate a decomposition (only for method 0 (bath), requiers basis_array input)

basis.array
~~~~~~~~~~~

The basis.array is a list of integers containing all basis functions that should be included in a subspace for
calculating decompositions of the hybridisation. (E.g. for computing the contribution of a surface include all basis
functions of surface atoms in this list). Example calculations can be found in ./examples

Run HYDRA
~~~~~~~~~

If all input files are present go to your working directory and run HYDRA::

    $ cd path/to/working/dir
    $ path/to/build/HYDRA (> output.txt #if you want to save the output)

Docs
====

.. doxygenfile:: main.cpp
   :project: HYDRA
